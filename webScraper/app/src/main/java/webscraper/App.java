/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package webscraper;

import java.io.FileWriter;
import java.io.IOException;
import org.jsoup.*;
import org.jsoup.nodes.*;
import org.jsoup.select.*;
import java.util.*;
import com.google.gson.Gson;
import java.time.Year;
import java.util.logging.Level;
import java.util.logging.Logger;

public class App {
        
    private static ArrayList<GrandPrix> gs = new ArrayList<>();
    
    private static List<Standing> s = new ArrayList<>();
    
    private static Document doc = null;

    private static void getGrandprix(String url) {
        doc = null;
        try {
            doc = Jsoup.connect(url)
                .userAgent(USER_AGENT)
                .header("Accepted-Language", "*")
                .get();
        } catch (Exception e) {
            //TODO: handle exception
        }

        Element products = doc.select("table").get(0);
        Element tbody = products.select("tbody").get(0);

        Elements rows = tbody.select("tr");

        for (Element row : rows) {
            GrandPrix g = new GrandPrix();

            Elements cols = row.select("td");
            g.setUrl(cols.get(1).select("a").get(0).attr("href"));
            g.setName(cols.get(1).text());
            g.setDate(cols.get(2).text());

            gs.add(g);
        }
        
        for(GrandPrix g : gs){
           Thread thread1 = new Thread(()-> getStandings(g));
           Thread thread2 = new Thread(()-> getQualifying(g));
           
           thread1.start();
           thread2.start();
           
            try {
                thread1.join();
                thread2.join();
            } catch (InterruptedException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        writeJson("grandPrix.json",gs);
    }
    
    private static void getStandings(GrandPrix g){
        doc = null;
        try {
            doc = Jsoup.connect(HOST + gs.get(gs.indexOf(g)).getUrl())
                    .userAgent(USER_AGENT)
                    .header("Accepted-Language", "*")
                    .get();
        } catch (Exception e) {
            //TODO: handle exception
        }

        ArrayList<Standing> standings = new ArrayList<>();

        Element products = doc.select("table").get(0);
        Element tbody = products.select("tbody").get(0);

        Elements rows = tbody.select("tr");

        for (Element row : rows) {
            Standing s = new Standing();

            Elements cols = row.select("td");
            s.setPos(cols.get(1).text());
            s.setNumber(cols.get(2).text());
            s.setName(cols.get(3).select("span").get(0).text());
            s.setSecondName(cols.get(3).select("span").get(1).text());
            s.setCode(cols.get(3).select("span").get(2).text());
            s.setConstructor(cols.get(4).text());
            s.setLaps(cols.get(5).text());
            s.setTime(cols.get(6).text());

            standings.add(s);
        }
        gs.get(gs.indexOf(g)).setStandings(standings);
    }
    
     private static void getQualifying(GrandPrix g){
        doc = null;
        String url = g.getUrl().replaceAll("race-result.html", "qualifying.html");
        try {
            doc = Jsoup.connect(HOST + url)
                    .userAgent(USER_AGENT)
                    .header("Accepted-Language", "*")
                    .get();
        } catch (Exception e) {
            //TODO: handle exception
        }

        ArrayList<Qualifying> qs = new ArrayList<>();

        Element products = doc.select("table").get(0);
        Element tbody = products.select("tbody").get(0);

        Elements rows = tbody.select("tr");

        for (Element row : rows) {
            Elements cols = row.select("td");
            
            Qualifying q = new Qualifying()
                    .setPos(cols.get(1).text())
                    .setNumber(cols.get(2).text())
                    .setName(cols.get(3).select("span").get(0).text())
                    .setSecondName(cols.get(3).select("span").get(1).text())
                    .setCode(cols.get(3).select("span").get(2).text())
                    .setConstructor(cols.get(4).text())
                    .setQ1(cols.get(5).text())
                    .setQ2(cols.get(6).text())
                    .setQ3(cols.get(7).text())
                    .setLaps(cols.get(8).text())
                    .build();

            qs.add(q);
        }
        gs.get(gs.indexOf(g)).setQs(qs);
    }
    
    private static void getF1Teams(String url){
        Document doc = null;

        try {
            doc = Jsoup.connect(url)
                .userAgent(USER_AGENT)
                .header("Accepted-Language", "*")
                .get();
        } catch (Exception e) {
            //TODO: handle exception
        }

        List<String> urls = new ArrayList<>();
        
        Element main = doc.select("main").get(0);
        
        Elements out = main.select("div").get(14).children();
        
        for (Element row : out){
            String u = row.select("div").get(0).select("a").get(0).attr("href");
            urls.add(u);
        }
        
        List<Constructor> cons = new ArrayList<>();
        
        for (String u : urls){
            try {
                doc = Jsoup.connect(HOST+u)
                    .userAgent(USER_AGENT)
                    .header("Accepted-Language", "*")
                    .get();
            } catch (Exception e) {
                //TODO: handle exception
            }
            
            Element table = doc.select("table").get(0);
            Element tbody = table.select("tbody").get(0);

            Elements rows = tbody.select("tr");

            Constructor c = new Constructor();

            c.setName(rows.get(0).select("td").get(0).text());
            c.setBase(rows.get(1).select("td").get(0).text());
            c.setTeamChief(rows.get(2).select("td").get(0).text());
            c.setTechChief(rows.get(3).select("td").get(0).text());
            c.setChassis(rows.get(4).select("td").get(0).text());
            c.setPowUnit(rows.get(5).select("td").get(0).text());
            c.setFirstTeamEntry(rows.get(6).select("td").get(0).text());
            c.setWorldChamps(rows.get(7).select("td").get(0).text());
            c.setPolePos(rows.get(9).select("td").get(0).text());
            c.setFastestlap(rows.get(10).select("td").get(0).text());

            cons.add(c);
        }
        
        writeJson("constructors.json",cons);
    }
    
    private static void getPilots(String url){
        Document doc = null;

        try {   
            doc = Jsoup.connect(url)
                .userAgent(USER_AGENT)
                .header("Accepted-Language", "*")
                .get();
        } catch (Exception e) {
            //TODO: handle exception
        }
        
        Elements out = doc.select("main").get(0).select("div").get(14).children();
        
        List<Pilota> pilots = new ArrayList<>();
        
        for (Element row : out){
            try {
                doc = Jsoup.connect(HOST+row.select("div").get(0).select("a").get(0).attr("href"))
                    .userAgent(USER_AGENT)
                    .header("Accepted-Language", "*")
                    .get();
            } catch (Exception e) {
                //TODO: handle exception
            }
            
            Element table = doc.select("table").get(0);
            Element tbody = table.select("tbody").get(0);

            Elements rows = doc.select("table").get(0).select("tbody").get(0).select("tr");

            Pilota p = new Pilota();

            p.setTeam(rows.get(0).select("td").get(0).text());
            p.setNationality(rows.get(1).select("td").get(0).text());
            p.setPodiums(rows.get(2).select("td").get(0).text());
            p.setGrandPrixEntered(rows.get(4).select("td").get(0).text());
            p.setWorldChamps(rows.get(5).select("td").get(0).text());
            p.setDateOfBirth(rows.get(8).select("td").get(0).text());
            p.setPlaceOfBirth(rows.get(9).select("td").get(0).text());
            
            Element m = doc.select("main").get(0);
            Element figCap = m.selectFirst("figcaption");
            
            p.setNumber(figCap.select("div").get(0).select("span").get(0).text());
            p.setName(figCap.select("h1").get(0).text());

            pilots.add(p);
        }
        
        writeJson("drivers.json",pilots);
    }

    private static void getFastestLap(String url) {
        Document doc = null;

        try {
            doc = Jsoup.connect(url)
                .userAgent(USER_AGENT)
                .header("Accepted-Language", "*")
                .get();
        } catch (Exception e) {
            //TODO: handle exception
        }
        
        List<FastestLap> fls = new ArrayList<>();

        Element products = doc.select("table").get(0);
        Element tbody = products.select("tbody").get(0);

        Elements rows = tbody.select("tr");

        for (Element row : rows) {
            FastestLap fl = new FastestLap();

            Elements cols = row.select("td");
            fl.setGrandPrix(cols.get(1).text());
            fl.setDriver(cols.get(2).text());
            fl.setCar(cols.get(3).text());
            fl.setTime(cols.get(4).text());

            fls.add(fl);
        }
        
        writeJson("fastestsLap.json",fls);
    }
    
    private static void writeJson(String fileName,Object o){
        try (FileWriter myWriter = new FileWriter(fileName)) {
            myWriter.write(new Gson().toJson(o));
            myWriter.close();
        } catch (IOException e) {}
    }
    
    public String getGreeting() {
        return "Hello World!";
    }
    
    private static final String HOST = "https://www.formula1.com/";

    private static final String USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36";

    public static void main(String[] args) {
        getAllData();
        updateStandings();
    }
    
    private static void getAllData(){
        long mill = System.currentTimeMillis();
        Year thisYear = Year.now();
        String year = String.valueOf(thisYear);
        
        Thread thread1 = new Thread(()-> getGrandprix(HOST+"en/results.html/" + year + "/races.html"));
        Thread thread2 = new Thread(()-> getF1Teams(HOST+"en/teams.html"));
        Thread thread3 = new Thread(()-> getPilots(HOST + "en/drivers.html"));
        Thread thread4 = new Thread(()-> getFastestLap(HOST + "en/results.html/" + year + "/fastest-laps.html"));
        
        thread1.start();
        thread2.start();
        thread3.start();
        thread4.start();
        
        try{
            thread1.join();
            thread2.join();
            thread3.join();
            thread4.join();
        }catch(Exception e){
            e.printStackTrace();
        }
        
        System.out.println("\ntime elapsed getting all data:\t"+(System.currentTimeMillis()-mill));
    }
    
    private static void updateStandings(){
        long mill = System.currentTimeMillis();
        Year thisYear = Year.now();
        String year = String.valueOf(thisYear);
        
        Thread thread1 = new Thread(()-> getGrandprix(HOST+"en/results.html/" + year + "/races.html"));
        Thread thread4 = new Thread(()-> getFastestLap(HOST + "en/results.html/" + year + "/fastest-laps.html"));
        
        thread1.start();
        thread4.start();
        
        try{
            thread1.join();
            thread4.join();
        }catch(Exception e){
            e.printStackTrace();
        }
        
        System.out.println("\ntime elapsed getting updating standings:\t"+(System.currentTimeMillis()-mill));
    }
}
